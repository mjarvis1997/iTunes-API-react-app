{"version":3,"sources":["Components/SearchBar.js","Components/AlbumFlexbox.js","Components/AlbumDetails.js","App.js","index.js"],"names":["SearchBar","props","handleSubmit","event","preventDefault","handleChange","bind","this","HandleUserInputChange","target","value","class","onSubmit","type","onChange","React","Component","AlbumFlexbox","HandleClick","HandleNewAlbumSelected","name","console","log","state","isAlbumSelected","individualAlbumElements","albumInfo","map","currentAlbum","onClick","collectionName","src","artworkUrl100","collectionId","AlbumDetails","index","currentAlbumIndex","releaseDate","substring","className","artistName","href","collectionViewUrl","App","GetAlbumsFromAPI","artist","a","fetch","response","json","data","albumName","i","length","setState","window","scrollTo","val","userInput","resultCount","numOfAlbums","albumData","push","collectionType","results","trackCount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5a6d212.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SearchBar extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\t// bind change and submit function for user input\r\n\t\tthis.handleChange = this.handleChange.bind(this);\r\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\r\n\t}\r\n\r\n\t// call parent function from App component to store user input\r\n\t// needs to be stored at a higher state so other components can access\r\n\thandleChange(event) {\r\n\t\tthis.props.HandleUserInputChange(event.target.value);\r\n\t}\r\n\r\n\t// prevents default response to input submission\r\n\thandleSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t}\r\n\r\n\t// return simple form with input textbox\r\n\trender() {\r\n\t\treturn (\r\n\t\t  <form class=\"searchBar\" onSubmit={this.handleSubmit}>\r\n            <label>\r\n              Enter artist name here:\r\n            </label>\r\n\t\t\t<input type=\"text\" onChange={this.handleChange} />\r\n            <input class=\"hidden\" type=\"submit\" value=\"Submit\" />\r\n          </form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\n\n// returns a flexbox populated with AlbumCover components\n// props for each album come from api calls in parent component\nclass AlbumFlexbox extends React.Component {\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tisAlbumSelected: 0,\r\n\t\t};\r\n\t}\n\n\t// call parent function from App component to report selected album\r\n\t// needs to be stored at a higher state so other components can access\r\n\tHandleClick = (event) => {\r\n\t\tthis.props.HandleNewAlbumSelected(event.target.name);\r\n\t\tconsole.log(\"hello\");\r\n\t}\n\n\trender() {\r\n\t\t// map album info from array in props\r\n\t\t// results in list of img elements\r\n\t\tlet individualAlbumElements = this.props.albumInfo.map((currentAlbum) =>\r\n\t\t\t<div>\r\n\t\t      <img key={currentAlbum.collectionId}  onClick={this.HandleClick} name={currentAlbum.collectionName} src={currentAlbum.artworkUrl100} />\r\n\t\t\t</div>\r\n\t\t);\r\n\r\n\t\treturn (\n\t\t  <div class=\"albumFlexbox\">\n\t\t\t{individualAlbumElements}\n\t\t  </div>\n\t\t);\r\n\t}\r\n}\n export default AlbumFlexbox;\n\n\n","import React from 'react';\n\n// returns a div populated with details of the current album\nclass AlbumDetails extends React.Component {\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n            index: -1\r\n\t\t};\r\n\t}\n\n\trender() {\r\n\t\t\r\n\t\tlet currentAlbumIndex = this.props.currentAlbumIndex;\r\n\r\n\t\t// return populated album info\r\n\t\tif(currentAlbumIndex !== -1)\r\n\t\t{\r\n\t\t\t// format date for display\r\n\t\t\tlet releaseDate = this.props.albumInfo[currentAlbumIndex].releaseDate.substring(0,4); \r\n\r\n\t\t\treturn (\n\t\t\t\t<div class=\"albumDetails\">\n\t\t\t\t  <p className=\"label\">Album Name: </p>\r\n\t\t\t\t  <p className=\"output\">{this.props.albumInfo[currentAlbumIndex].collectionName}</p>\n\t\t\t\t  <p className=\"label\">Artist Name: </p>\r\n\t\t\t\t  <p className=\"output\">{this.props.albumInfo[currentAlbumIndex].artistName}</p>\n\t\t\t\t  <p className=\"label year\">Year Released: </p>\r\n\t\t\t\t  <p className=\"output year\">{releaseDate}</p>\n\t\t\t\t  <a href={this.props.albumInfo[currentAlbumIndex].collectionViewUrl} className=\"url\" target=\"_blank\"> View in iTunes</a>\n\t\t\t\t</div>\n\t\t\t);\r\n\t\t} else {\r\n\t\t// return empty album info\r\n\t\t\treturn (\n\t\t\t\t<div class=\"albumDetails\">\n\t\t\t\t  <p className=\"label\">Album Name: </p>\r\n\t\t\t\t  <p className=\"output\">Click an album for more info</p>\n\t\t\t\t  <p className=\"label\">Artist Name: </p>\r\n\t\t\t\t  <p className=\"output\">-</p>\n\t\t\t\t  <p className=\"label year\">Year Released: </p>\r\n\t\t\t\t  <p className=\"output year\">-</p>\n\t\t\t\t</div>\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\n export default AlbumDetails;\n","/* references\r\n https://reactjs.org/docs/components-and-props.html\r\n https://reactjs.org/docs/thinking-in-react.html\r\n https://create-react-app.dev/docs/getting-started\r\n https://reactjs.org/docs/forms.html\r\n https://levelup.gitconnected.com/all-possible-ways-of-making-an-api-call-in-plain-javascript-c0dee3c11b8b\r\n*/\n// dependencies\nimport React from 'react';\n\n// css\nimport './App.css';\nimport './Components/SearchBar.css';\nimport './Components/AlbumFlexbox.css';\nimport './Components/AlbumDetails.css';\n\n// components\nimport SearchBar from './Components/SearchBar';\nimport AlbumFlexbox from './Components/AlbumFlexbox';\nimport AlbumDetails from './Components/AlbumDetails';\n\n\nclass App extends React.Component {\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userInput: '',\r\n            albumInfo: [],\r\n            currentAlbumIndex: -1,\r\n            resultCount: 0\r\n\t\t};\r\n\t}\r\n\r\n    // retrieve album data from iTunes API\n    GetAlbumsFromAPI = async (artist) => {\n\t    let response = await fetch(\"https://itunes.apple.com/search?entity=album&term=\" + artist);\r\n\t    let data = await response.json();\r\n\t    return data;\r\n    }\r\n\r\n    // receive albumName from AlbumFlexbox when an album is clicked\r\n    // store index of the selected album in state\r\n    HandleNewAlbumSelected = (albumName) => {\r\n        let tempName = '';\r\n\r\n        for(let i = 0; i < this.state.albumInfo.length; ++i)\r\n        {\r\n            tempName = this.state.albumInfo[i].collectionName;\r\n            if(tempName === albumName){\r\n                this.setState({currentAlbumIndex: i});\r\n\t\t    }\r\n\t\t}\r\n\r\n        window.scrollTo(0,0);\r\n\t}\r\n\r\n    // adjust state when input changes\r\n    HandleUserInputChange = async (val) => {\r\n        \r\n        // reset selected album index\r\n        this.setState({currentAlbumIndex: -1});\r\n\r\n        // store user input in state\r\n        this.setState({userInput: val});\r\n\r\n        // get albums from API and store result count in state\r\n        let response = await this.GetAlbumsFromAPI(val);\r\n        this.setState({resultCount: response.resultCount});\r\n\r\n        // check if search returned anything valid\r\n        if(this.state.resultCount === 0)\r\n        {\r\n            // there are no results\r\n            this.setState({albumInfo: []});\r\n\t\t} \r\n        else {\r\n\r\n            // init needed variables\r\n            let numOfAlbums = this.state.resultCount;\r\n            let albumData = [];\r\n\r\n            // iterate through API response and store data on albums\r\n            for(let i = 0; i < numOfAlbums; ++i)\r\n            {\r\n                // add album info to state level array\r\n                albumData.push({\r\n                    collectionType: response.results[i].collectionType,\r\n                    collectionName: response.results[i].collectionName,\r\n                    collectionViewUrl: response.results[i].collectionViewUrl,\r\n                    artworkUrl100: response.results[i].artworkUrl100,\r\n                    releaseDate: response.results[i].releaseDate,\r\n                    trackCount: response.results[i].trackCount,\r\n                    artistName: response.results[i].artistName,\r\n                    collectionId: response.results[i].collectionId,\r\n                    collectionViewUrl: response.results[i].collectionViewUrl\r\n                });\r\n\t\t    }\r\n\r\n            // store array of album data in the state\r\n            this.setState({albumInfo: albumData});\r\n        } \r\n\t}\r\n\r\n    render () {\r\n        return (\n          <div className={this.state.resultCount > 4 ? \"app full\" : \"app\" }>\n            <div className=\"title\">iTunes Album Lookup</div>\n            <div className=\"header\">\n              <div className=\"searchBarDiv\">\n                <SearchBar artistName={this.state.userInput} HandleUserInputChange={this.HandleUserInputChange} />\n              </div>\n              <div className=\"albumInfoDiv\">\n                <AlbumDetails albumInfo={this.state.albumInfo} currentAlbumIndex={this.state.currentAlbumIndex} />\n              </div>\n            </div>\n            <AlbumFlexbox artistName={this.state.userInput} albumInfo={this.state.albumInfo} HandleNewAlbumSelected={this.HandleNewAlbumSelected} />\r\n          </div>\r\n        );\r\n\t}\r\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}